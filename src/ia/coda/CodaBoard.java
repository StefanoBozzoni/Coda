/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ia.coda;

import java.awt.Component;
import java.awt.Menu;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import ia.coda.GuessField.*;
import java.util.Random;

/**
 *
 * @author silviogao
 */
public class CodaBoard extends javax.swing.JFrame implements IGuessedField {

    boolean changeismade = false;
    Game codaGame;
    boolean isPlayer1Turn = true;

    @Override
    public void onButtonOkGuessedField(int numberoftile, Colore color, JLabel label) {
        if (isPlayer1Turn) {
            //String s = JOptionPane.showInputDialog("Guess the tile number");
            System.out.println(label.getName());
            String labelClicked = label.getName();
            String[] strings = labelClicked.split("_");
            int number = Integer.valueOf(strings[1]);
            Tile clickedTile = codaGame.getPlayers()[1].getPlayerTiles()[number];
            System.out.println(clickedTile.getNumtile());

            String numTile = String.valueOf(clickedTile.getNumtile());
            String colorTile = String.valueOf(clickedTile.getColor_tile());

            if ((numTile.equals(String.valueOf(numberoftile)) && (colorTile.equals(String.valueOf(color))))) {
                fieldpanel.add(label);
                changeismade = true;
                pack();
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogueButton = 0;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Correct!\nWould You Like To Continue?\n", "Correct", dialogueButton);
                if (dialogResult != 0) {
                    JLabel tileToAddlbl = new JLabel("");
                    tileToAddlbl.setIcon(labelDrew.getIcon());
                    tileToAddlbl.setName("Label_" + codaGame.getCurrentPlayer().getNumTiles());
                    Player1Panel.add(tileToAddlbl);

                    Player player = codaGame.getCurrentPlayer();
                    Tile drewTile = codaGame.getTileDrew();
                    player.addTile(drewTile.getNumtile(), drewTile.getColor_tile());

                    labelDrew.setIcon(null);
                    labelDrew.revalidate();
                    pack();
                }
            } else {
                isPlayer1Turn = false;
                javax.swing.JOptionPane.showMessageDialog(null, "Opss! Wrong", "Incorrect", javax.swing.JOptionPane.WARNING_MESSAGE);
                JLabel tileToAddlbl = new JLabel("");
                tileToAddlbl.setIcon(labelDrew.getIcon());
                tileToAddlbl.setName(labelDrew.getName());
                fieldpanel.add(tileToAddlbl);
                labelDrew.setIcon(null);
                labelDrew.revalidate();
                pack();
                codaGame.playerCanDraw(true);
                codaGame.nextTurn();
            }
        }

    }

    /**
     * Creates new form Coda
     */
    public CodaBoard() {
        initComponents();
        codaGame = new Game();
        displayGame();
    }

    void saveGame() {

    }

    void doGamePlayer2() {
        /*int numberoftile;
        Colore color;
        JLabel label;
        Random x = new Random();
        Random y = new Random();
        int position = y.nextInt(3);
        int numberGuess = x.nextInt(11);
        int number = Integer.valueOf(position);
        Tile ChosenTile = codaGame.getPlayers()[0].getPlayerTiles()[number];
        int guess = numberGuess;
        String numTile = String.valueOf(ChosenTile.getNumtile());
        if (numTile.equals(String.valueOf(guess))) {
            fieldpanel.add(label);
            changeismade = true;
            
            pack();
        } else {
            isPlayer1Turn = true;
        }*/
        System.exit(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Draw = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Player1Panel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Player2Panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        fieldpanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        NumberOfRounds = new javax.swing.JLabel();
        labelDrew = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        New = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        Instructions = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        Draw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ia/coda/cover.png"))); // NOI18N
        Draw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawActionPerformed(evt);
            }
        });

        Player1Panel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jScrollPane1.setViewportView(Player1Panel);

        Player2Panel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        Player2Panel.add(jLabel1);

        jScrollPane2.setViewportView(Player2Panel);

        jLabel2.setText("TILE DREW");

        fieldpanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jScrollPane3.setViewportView(fieldpanel);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel5.setText("Round:");

        NumberOfRounds.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        NumberOfRounds.setText("N");

        File.setText("File");

        New.setText("New");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });
        File.add(New);

        Save.setText("Save");
        File.add(Save);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        MenuBar.add(File);

        Help.setText("Help");

        Instructions.setText("Instruction");
        Instructions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InstructionsActionPerformed(evt);
            }
        });
        Help.add(Instructions);

        MenuBar.add(Help);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Draw, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NumberOfRounds, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jLabel3))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2)
                        .addComponent(labelDrew, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(NumberOfRounds, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(101, 101, 101)
                        .addComponent(Draw, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(132, 132, 132)
                                .addComponent(jLabel3)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelDrew, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    /*
    void drawTiles() {
        int currentPlayer = 1;
        if (currentPlayer == 1) {
            for (int i = 0; i < 16; i++) {
                JLabel label = new JLabel();
                Tile currentDraw = codaGame.getPlayers()[0].getPlayerTiles()[i];
                label.setIcon(new ImageIcon("./" + currentDraw.getFileName()));
                Player1Draw.add(label);
                currentPlayer = currentPlayer - 1;
            }
        }
        if (currentPlayer == 0) {
            for (int j = 1; j < 16; j++) {
                JLabel label = new JLabel();
                Tile currentDraw = codaGame.getPlayers()[1].getPlayerTiles()[j];
                label.setIcon(new ImageIcon("./" + currentDraw.getFileName()));
                Player2Draw.add(label);
                currentPlayer = currentPlayer + 1;
            }

        }
        pack();
    }
     */
    void initGame() {

        codaGame = new Game();
        pack();
        setVisible(true);
    }

    void displayGame() {

        //Problem with displaying Tiles
        Draw.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (codaGame.canPlayerDraw()) {
                    super.mouseClicked(e);
                    codaGame.playerCanDraw(false);
                    JLabel label = new JLabel();
                    //Tile tile = codaGame.draw();
                    //String labelClicked = label.getName();
                    //String[] strings = labelClicked.split("_");
                    //int number = Integer.valueOf(strings[1]);

                    Tile clickedTile = codaGame.getDeck().draw();
                    codaGame.setTileDrew(clickedTile);

                    //String numTile = String.valueOf(clickedTile.getNumtile());
                    labelDrew.setIcon(new ImageIcon("./" + clickedTile.getFileName()));
                    labelDrew.setName("label_" + clickedTile.getNumtile());
                    //Player1Draw.add(label);

                    changeismade = true;
                    pack();

                    //To change body of generated methods, choose Tools | Templates.
                    codaGame.setUserCanGuess();
                }
            }
        }
        );

        for (int i = 0; i < 4; i++) {
            JLabel label = new JLabel();
            Tile currentTile = codaGame.getPlayers()[0].getPlayerTiles()[i];
            label.setIcon(new ImageIcon("./" + currentTile.getFileName()));
            Player1Panel.add(label);

        }

        for (int j = 0; j < 4; j++) {
            JLabel label = new JLabel();
            Tile currentTile = codaGame.getPlayers()[1].getPlayerTiles()[j];
            label.setIcon(new ImageIcon("./" + currentTile.getFileName()));
            label.setName("Label_" + j);
            Player2Panel.add(label);

            IGuessedField thisForm = this;

            label.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {

                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            if (codaGame.canUserStartGuessing()) {
                                new GuessField().show(thisForm, label);
                            }

                        }
                    });

                }
            });
        }

        pack();
    }


    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        boolean doNotWantToSave = false;
        if (doNotWantToSave) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed

        initGame();

    }//GEN-LAST:event_NewActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogueButton = 0;
        int dialogueInput = 0;
        int input = JOptionPane.showConfirmDialog(null, "Do you want to exit?", "Confirm message", dialogueInput);
        if (input == 0) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would You Like To Save Your Game First?", "Warning", dialogueButton);
            if (dialogResult == 0) {
                saveGame();
                System.exit(0);
            } else {
                System.exit(0);
            }
        }

    }//GEN-LAST:event_ExitActionPerformed

    private void InstructionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InstructionsActionPerformed
        Component Menu = null;
        JOptionPane.showMessageDialog(Menu,
                "The last player with tiles up wins the game\n"
                + "Play any number of rounds\n"
                + "----------------------------------------------\n"
                + "1. Press the START button\n"
                + "2. The Round is displayed at the top\n"
                + "3. Four tiles are randomly distributed to each player\n"
                + "4. Draw a tile from the deck\n"
                + "5. Choose an opponent's tile and guess the tile\n"
                + "6. If it is Correct:"
                + " Guess another tile OR Add the tile drew into your hand\n"
                + "7. If it is Incorrect:"
                + " Reveal the tile drew\n"
                + "8. If there aren't any more tiles to draw:"
                + " Keep guessing without drawing tiles");
    }//GEN-LAST:event_InstructionsActionPerformed

    private void DrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DrawActionPerformed
    void closingMethod() {
        // check flag status for changes made
        int roundResult = 0;
        int dialogButton = JOptionPane.YES_NO_OPTION;
        if (changeismade) {
            roundResult = JOptionPane.showConfirmDialog(null, "Would You Like To Save Your Game First?", "Warning", dialogButton);
            // Saving code here
        } else {
            System.exit(0);
        }
        if (roundResult == 1) {
            System.exit(0);
        }
        if (roundResult == 0) {
            System.out.println("saving"); //call save method and then quit
            saveGame();
            System.exit(0);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CodaBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CodaBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CodaBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CodaBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CodaBoard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Draw;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Help;
    private javax.swing.JMenuItem Instructions;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem New;
    private javax.swing.JLabel NumberOfRounds;
    private javax.swing.JPanel Player1Panel;
    private javax.swing.JPanel Player2Panel;
    private javax.swing.JMenuItem Save;
    private javax.swing.JPanel fieldpanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelDrew;
    // End of variables declaration//GEN-END:variables
}
